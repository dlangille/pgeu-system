# -*- coding: utf-8 -*-
# Generated by Django 1.11.27 on 2020-03-30 17:23
from __future__ import unicode_literals

from django.db import migrations, models
from django.conf import settings

import io
import zoneinfo

from postgresqleu.mailqueue.util import send_simple_mail


def get_matching_timezone(location):
    if ',' in location:
        locname = location.split(',')[0].strip()
    else:
        locname = location.strip()

    citymatch = [x for x in zoneinfo.available_timezones() if locname.lower() in x.lower()]
    if len(citymatch) == 1:
        return (citymatch[0], 'city')

    # No match on city, see if it happens to be in a country with just one timezone
    if ',' not in location:
        return (None, None)

    # We used to match on country name here, but zoneinfo doesn't have that data, and we don't
    # want to pull in pytz just for that. And the expectation by now is that nobody will be
    # migrating data so old they haven't already passed this step, so we just drop it.

    return (None, None)


def set_timezone_name(apps, schema_editor):
    # Do our best to figure out the timezone names, and send a report to the admin.
    status = io.StringIO()
    status.write("A field for conference timezone has been added, and the following\n")
    status.write("mappings have been done. Make sure you review these and ADJUST this\n")
    status.write("for all conferences before applying the updates that enable full\n")
    status.write("timezone support later!\n\n")

    success = 0
    failed = 0

    Conf = apps.get_model('confreg', 'conference')
    for c in Conf.objects.all().order_by('series', '-startdate'):
        (tzname, matchwhat) = get_matching_timezone(c.location)
        if tzname:
            success += 1
            c.tzname = tzname
            c.save()
            status.write("{} - matched {} to timezone {} using {}\n".format(c.conferencename, c.location, c.tzname, matchwhat))
        else:
            failed += 1
            c.tzname = settings.TIME_ZONE
            c.save()
            status.write("{} - found no match for {}, set timezone to {}\n".format(c.conferencename, c.location, c.tzname))

    if success > 0 or failed > 0:
        status.write("\n\n{} successful mappings and {} failed.\n\nMake sure these are verified before proceeding with migrations!\n".format(success, failed))
        send_simple_mail(settings.DEFAULT_EMAIL,
                         settings.DEFAULT_EMAIL,
                         "Timezone field added to conferences",
                         status.getvalue(),
        )


def clear_timezone_name(apps, schema_editor):
    Conf = apps.get_model('confreg', 'conference')
    Conf.objects.all().update(tzname=None)


class Migration(migrations.Migration):

    dependencies = [
        ('confreg', '0072_status_withdrawn'),
        ('mailqueue', '0002_subject_and_time'),
    ]

    operations = [
        migrations.AddField(
            model_name='conference',
            name='tzname',
            field=models.CharField(max_length=100, verbose_name='Time zone', null=True, blank=True),
        ),
        migrations.RunPython(set_timezone_name, clear_timezone_name),
        migrations.AlterField(
            model_name='conference',
            name='tzname',
            field=models.CharField(max_length=100, verbose_name='Time zone', default=settings.TIME_ZONE),
        ),
    ]
